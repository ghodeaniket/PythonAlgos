from collections import deque

def snakesAndLadders(board):
    n = len(board)

    def get(s):
        # Given a square num s, return board coordinates (r, c)
        quot, rem = divmod(s-1, n)
        row = n -1 - quot
        col = rem if row%2 != n%2 else n - 1 - rem
        return low,col
    
    dist = {1: 0}
    queue = deque([1])
    while queue:
        s = queue.popleft()
        if s == n*n: return dist[s]
        for s2 in range(s+1, min(s+6, n*n) + 1):
            r, c = get(s2)
            if board[r][c] != -1:
                s2 = board[r][c]
            if s2 not in dist:
                dist[s2] = dist[s] + 1
                queue.append(s2)

        return -1
    
    print(snakesAndLadders([[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,35,-1,-1,13,-1],[-1,-1,-1,-1,-1,-1],[-1,15,-1,-1,-1,-1]]))