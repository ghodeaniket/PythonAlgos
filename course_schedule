def canFinish(numCourses, prerequisites):
    # Initialize an empty adjacency list
    adj_list = [[] for _ in range(numCourses)]

    # Fill the adjacency list
    for course, prerequisite in prerequisites:
        adj_list[course].append(prerequisite)

    # Initialize a list to keep track of the visited nodes
    # 0 means not visited, 1 means visited, -1 means visiting
    visited = [0] * numCourses

    def dfs(course):
        if visited[course] == -1: # we have a cycle
            return False
        if visited[course] == 1: # We've already visited this node
            return True
        
        visited[course] = -1 # Mark the node as visiting
        for prerequisite in adj_list[course]:
            if not dfs(prerequisite):
                return False
        visited[course] = 1 # Mark as visited
        return True
    
    # Perform DFS from each node
    for course in range(numCourses):
        if not dfs(course):
            return False
        
    return True

print(canFinish(2,[[1,0]]))
print(canFinish(2, [[1,0],[0,1]]))